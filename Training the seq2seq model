// Setting the hyperparameters
//the whole process of the brain has the following processes:
  1-- getting the batches of input into the neural network
  2-- forward propagating them inside the encoder to get the encoder states
  3-- forward propagating the encoder states with the targets inside the decoder RNN to get the final output
  4-- Backpropagating the loss generated by the output and the targets back into the NN and updating the weights towards the direction of a better ability for the chatbot to speak like a human.


epochs = 100                     //it is a one whole iteration of the training 
batch_size = 32                  //  
rnn_size = 1024                  // 
num_layers = 3                   //hw many layers we have in encoder_rnn and decoder_nn
encoding_embedding_size = 1024   //it is the no . of columns in the embedding matrix i.e the no. of columns we wanna have for embeddings colmn
decoding_embedding_size = 1024   //
learning_rate = 0.001            //
learning_rate_decay = 0.9        //how the learning rate decays to learn better
min_learning_rate = 0.0001       // learning rate cannot drop below this
keep_probability = 0.5           // 1 - dropout rate
 
 //here we define a tensorflow session where all tensorflow sessionn on which all the tensorflow training will be run . TO open a session 
 //are going to create an object of the interactive session class, and that object will be our session. But before we do this , we need to reset the tensorflow graph to ensure
 //that the graph is ready for training
 # Defining a session
tf.reset_default_graph()
session = tf.InteractiveSession()


//We are going to load the inputs of our seq2seq model, to do this, we have a tool that we defined earlier, i.en model_inputs() that returns, the 
// inputs,targets, lr, keep-probablity
# Loading the model inputs
inputs, targets, lr, keep_prob = model_inputs()

//we are going to set the sequence length variable,by creating it using a placeholder, because we are gooing to use a default value incase input is not fed.
# Setting the sequence length
sequence_length = tf.placeholder_with_default(25//max length, None// shape, name = 'sequence_length')

//we need to give the tensor a shape
 # Getting the shape of the inputs tensor
input_shape = tf.shape(inputs)gjh

//We are going to get the training predictions and the test predictions, we call the seq2seq model which reurns the training and the test predictions
# Getting the training and test predictions
training_predictions, test_predictions = seq2seq_model(tf.reverse(inputs, [-1])//reverses the dimensions of the tensor,
                                                       targets,
                                                       keep_prob,
                                                       batch_size,
                                                       sequence_length,
                                                       len(answerswords2int),
                                                       len(questionswords2int),
                                                       encoding_embedding_size,
                                                       decoding_embedding_size,
                                                       rnn_size,
                                                       num_layers,
                                                       questionswords2int)
                                                       
  //Gradient clipping--it is a technique that will cap the gradient in the graph to a min and max value to avoid exploding and vanishing gradient
  //issues
  //Loss error -- it is based on the weight across entropy lonss error , which is the most relevant loss to use when dealing with sequence.
  //Optimiser -- It will be an Adam Optimiser which is the best to cast a gradient descent.
  //adam optimiser -It takes learning rate as a parameter. 
  //we have one gradient per neuron in a neural network and each neuron we compute the gradient of the loss error wrt. the weights of the neuron.
  //The method of the optimiser 1.e the compute gradient method is used to compute these gradients of the loss error wrt the weights of each of the neurons/
  //
  # Setting up the Loss Error, the Optimizer and Gradient Clipping
with tf.name_scope("optimization"):
    loss_error = tf.contrib.seq2seq.sequence_loss(training_predictions,
                                                  targets,
                                                  tf.ones([input_shape[0], sequence_length]))
    optimizer = tf.train.AdamOptimizer(learning_rate)
    gradients = optimizer.compute_gradients(loss_error)
    clipped_gradients = [(tf.clip_by_value(grad_tensor, -5., 5.), grad_variable) for grad_tensor, grad_variable in gradients if grad_tensor is not None]
    optimizer_gradient_clipping = optimizer.apply_gradients(clipped_gradients)
 
 //WHY--all the sentences in a batch both Q and A must have same length.
 # Padding the sequences with the <PAD> token
def apply_padding(batch_of_sequences, word2int):
    max_sequence_length = max([len(sequence) for sequence in batch_of_sequences])
    return [sequence + [word2int['<PAD>']] * (max_sequence_length - len(sequence)) for sequence in batch_of_sequences]
   
   
      # Splitting the data into batches of questions and answers
def split_into_batches(questions, answers, batch_size):
    for batch_index in range(0, len(questions) // batch_size):   // indicates to get an integer value
        start_index = batch_index * batch_size
        questions_in_batch = questions[start_index : start_index + batch_size]
        answers_in_batch = answers[start_index : start_index + batch_size]
        padded_questions_in_batch = np.array(apply_padding(questions_in_batch, questionswords2int))
        padded_answers_in_batch = np.array(apply_padding(answers_in_batch, answerswords2int))
        yield padded_questions_in_batch, padded_answers_in_batch       
        
        
        //Splitting the questions and answers into training and validation sets
training_validation_split = int(len(sorted_clean_questions) * 0.15)
training_questions = sorted_clean_questions[training_validation_split:]
training_answers = sorted_clean_answers[training_validation_split:]
validation_questions = sorted_clean_questions[:training_validation_split]
validation_answers = sorted_clean_answers[:training_validation_split]



# Training
batch_index_check_training_loss = 100  // we are going to check the training loss every 100 batches
batch_index_check_validation_loss = ((len(training_questions)) // batch_size // 2) - 1
total_training_loss_error = 0
list_validation_loss_error = [] // list containing all the loss values
early_stopping_check = 0 //each time there is no improvement , check increments.
early_stopping_stop = 100 //upto 100 updations happen for the loss values
checkpoint = "chatbot_weights.ckpt" // to save the weights , which we'll be able to load when we chat with out trained chatbot
session.run(tf.global_variables_initializer()) // initialising all the global variables
for epoch in range(1, epochs + 1):
    for batch_index, (padded_questions_in_batch, padded_answers_in_batch) in enumerate(split_into_batches(training_questions, training_answers, batch_size)):
        starting_time = time.time()
        _, batch_training_loss_error = session.run([optimizer_gradient_clipping, loss_error], {inputs: padded_questions_in_batch,
                                                                                               targets: padded_answers_in_batch,
                                                                                               lr: learning_rate,
                                                                                               sequence_length: padded_answers_in_batch.shape[1],
                                                                                               keep_prob: keep_probability})
        total_training_loss_error += batch_training_loss_error
        ending_time = time.time()
        batch_time = ending_time - starting_time
        if batch_index % batch_index_check_training_loss == 0:
            print('Epoch: {:>3}/{}, Batch: {:>4}/{}, Training Loss Error: {:>6.3f}, Training Time on 100 Batches: {:d} seconds'.format(epoch,
                                                                                                                                       epochs,
                                                                                                                                       batch_index,
                                                                                                                                       len(training_questions) // batch_size,
                                                                                                                                       total_training_loss_error / batch_index_check_training_loss,
                                                                                                                                       int(batch_time * batch_index_check_training_loss)))
            total_training_loss_error = 0
        if batch_index % batch_index_check_validation_loss == 0 and batch_index > 0:
            total_validation_loss_error = 0
            starting_time = time.time()
            for batch_index_validation, (padded_questions_in_batch, padded_answers_in_batch) in enumerate(split_into_batches(validation_questions, validation_answers, batch_size)):
                batch_validation_loss_error = session.run(loss_error, {inputs: padded_questions_in_batch,
                                                                       targets: padded_answers_in_batch,
                                                                       lr: learning_rate,
                                                                       sequence_length: padded_answers_in_batch.shape[1],
                                                                       keep_prob: 1})
                total_validation_loss_error += batch_validation_loss_error
            ending_time = time.time()
            batch_time = ending_time - starting_time
            average_validation_loss_error = total_validation_loss_error / (len(validation_questions) / batch_size)
            print('Validation Loss Error: {:>6.3f}, Batch Validation Time: {:d} seconds'.format(average_validation_loss_error, int(batch_time)))
            learning_rate *= learning_rate_decay
            if learning_rate < min_learning_rate:
                learning_rate = min_learning_rate
            list_validation_loss_error.append(average_validation_loss_error)
            if average_validation_loss_error <= min(list_validation_loss_error):
                print('I speak better now!!')
                early_stopping_check = 0
                saver = tf.train.Saver()
                saver.save(session, checkpoint)
            else:
                print("Sorry I do not speak better, I need to practice more.")
                early_stopping_check += 1
                if early_stopping_check == early_stopping_stop:
                    break
    if early_stopping_check == early_stopping_stop:
        print("My apologies, I cannot speak better anymore. This is the best I can do.")
        break
print("Game Over")
 fyufyu
